/** * material-design-lite - Material Design Components in CSS, JS and HTML * @version v1.0.6 * @license Apache-2.0 * @copyright 2015 Google, Inc. * @link https://github.com/google/material-design-lite */ ! function() {
    "use strict";

    function e(e, t) {
        if (e) {
            if (t.element_.classList.contains(t.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {
                var s = document.createElement("span");
                s.classList.add(t.CssClasses_.MDL_RIPPLE_CONTAINER), s.classList.add(t.CssClasses_.MDL_JS_RIPPLE_EFFECT);
                var i = document.createElement("span");
                i.classList.add(t.CssClasses_.MDL_RIPPLE), s.appendChild(i), e.appendChild(s)
            }
            e.addEventListener("click", function(s) {
                s.preventDefault();
                var i = e.href.split("#")[1],
                    n = t.element_.querySelector("#" + i);
                t.resetTabState_(), t.resetPanelState_(), e.classList.add(t.CssClasses_.ACTIVE_CLASS), n.classList.add(t.CssClasses_.ACTIVE_CLASS)
            })
        }
    }

    function t(e, t, s, i) {
        if (i.tabBar_.classList.contains(i.CssClasses_.JS_RIPPLE_EFFECT)) {
            var n = document.createElement("span");
            n.classList.add(i.CssClasses_.RIPPLE_CONTAINER), n.classList.add(i.CssClasses_.JS_RIPPLE_EFFECT);
            var a = document.createElement("span");
            a.classList.add(i.CssClasses_.RIPPLE), n.appendChild(a), e.appendChild(n)
        }
        e.addEventListener("click", function(n) {
            n.preventDefault();
            var a = e.href.split("#")[1],
                l = i.content_.querySelector("#" + a);
            i.resetTabState_(t), i.resetPanelState_(s), e.classList.add(i.CssClasses_.IS_ACTIVE), l.classList.add(i.CssClasses_.IS_ACTIVE)
        })
    }
    var s = {
        upgradeDom: function(e, t) {},
        upgradeElement: function(e, t) {},
        upgradeElements: function(e) {},
        upgradeAllRegistered: function() {},
        registerUpgradedCallback: function(e, t) {},
        register: function(e) {},
        downgradeElements: function(e) {}
    };
    s = function() {
            function e(e, t) {
                for (var s = 0; sd; d++) {
                    if (r = l[d], !r) throw new Error("Unable to find a registered component for the given class.");
                    a.push(r.className), i.setAttribute("data-upgraded", a.join(","));
                    var h = new r.classConstructor(i);
                    h[C] = r, c.push(h);
                    for (var u = 0, m = r.callbacks.length; m > u; u++) r.callbacks[u](i);
                    r.widget && (i[r.className] = h);
                    var E = document.createEvent("Events");
                    E.initEvent("mdl-componentupgraded", !0, !0), i.dispatchEvent(E)
                }
            }

            function a(e) {
                Array.isArray(e) || (e = "function" == typeof e.item ? Array.prototype.slice.call(e) : [e]);
                for (var t, s = 0, i = e.length; i > s; s++) t = e[s], t instanceof HTMLElement && (n(t), t.children.length > 0 && a(t.children))
            }

            function l(t) {
                var s = "undefined" == typeof t.widget && "undefined" == typeof t.widget,
                    i = !0;
                s || (i = t.widget || t.widget);
                var n = {
                    classConstructor: t.constructor || t.constructor,
                    className: t.classAsString || t.classAsString,
                    cssClass: t.cssClass || t.cssClass,
                    widget: i,
                    callbacks: []
                };
                if (p.forEach(function(e) {
                        if (e.cssClass === n.cssClass) throw new Error("The provided cssClass has already been registered: " + e.cssClass);
                        if (e.className === n.className) throw new Error("The provided className has already been registered")
                    }), t.constructor.prototype.hasOwnProperty(C)) throw new Error("MDL component classes must not have " + C + " defined as a property.");
                var a = e(t.classAsString, n);
                a || p.push(n)
            }

            function o(t, s) {
                var i = e(t);
                i && i.callbacks.push(s)
            }

            function r() {
                for (var e = 0; e0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE) && (e.keyCode === this.Keycodes_.UP_ARROW ? (e.preventDefault(), t[t.length - 1].focus()) : e.keyCode === this.Keycodes_.DOWN_ARROW && (e.preventDefault(), t[0].focus()))
                }
            }, _.prototype.handleItemKeyboardEvent_ = function(e) {
                    if (this.element_ && this.container_) {
                        var t = this.element_.querySelectorAll("." + this.CssClasses_.ITEM + ":not([disabled])");
                        if (t && t.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {
                            var s = Array.prototype.slice.call(t).indexOf(e.target);
                            if (e.keyCode === this.Keycodes_.UP_ARROW) e.preventDefault(), s > 0 ? t[s - 1].focus() : t[t.length - 1].focus();
                            else if (e.keyCode === this.Keycodes_.DOWN_ARROW) e.preventDefault(), t.length > s + 1 ? t[s + 1].focus() : t[0].focus();
                            else if (e.keyCode === this.Keycodes_.SPACE || e.keyCode === this.Keycodes_.ENTER) {
                                e.preventDefault();
                                var i = new MouseEvent("mousedown");
                                e.target.dispatchEvent(i), i = new MouseEvent("mouseup"), e.target.dispatchEvent(i), e.target.click()
                            } else e.keyCode === this.Keycodes_.ESCAPE && (e.preventDefault(), this.hide())
                        }
                    }
                }, _.prototype.handleItemClick_ = function(e) {
                    e.target.hasAttribute("disabled") ? e.stopPropagation() : (this.closing_ = !0, window.setTimeout(function(e) {
                        this.hide(), this.closing_ = !1
                    }.bind(this), this.Constant_.CLOSE_TIMEOUT))
                }, _.prototype.applyClip_ = function(e, t) {
                    this.element_.classList.contains(this.CssClasses_.UNALIGNED) ? this.element_.style.clip = "" : this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT) ? this.element_.style.clip = "rect(0 " + t + "px 0 " + t + "px)" : this.element_.classList.contains(this.CssClasses_.TOP_LEFT) ? this.element_.style.clip = "rect(" + e + "px 0 " + e + "px 0)" : this.element_.classList.contains(this.CssClasses_.TOP_RIGHT) ? this.element_.style.clip = "rect(" + e + "px " + t + "px " + e + "px " + t + "px)" : this.element_.style.clip = ""
                }, _.prototype.addAnimationEndListener_ = function() {
                    var e = function() {
                        this.element_.removeEventListener("transitionend", e), this.element_.removeEventListener("webkitTransitionEnd", e), this.element_.classList.remove(this.CssClasses_.IS_ANIMATING)
                    }.bind(this);
                    this.element_.addEventListener("transitionend", e), this.element_.addEventListener("webkitTransitionEnd", e)
                }, _.prototype.show = function(e) {
                    if (this.element_ && this.container_ && this.outline_) {
                        var t = this.element_.getBoundingClientRect().height,
                            s = this.element_.getBoundingClientRect().width;
                        this.container_.style.width = s + "px", this.container_.style.height = t + "px", this.outline_.style.width = s + "px", this.outline_.style.height = t + "px";
                        for (var i = this.Constant_.TRANSITION_DURATION_SECONDS * this.Constant_.TRANSITION_DURATION_FRACTION, n = this.element_.querySelectorAll("." + this.CssClasses_.ITEM), a = 0; a = this.maxRows && e.preventDefault()
                        }, E.prototype.onFocus_ = function(e) {
                            this.element_.classList.add(this.CssClasses_.IS_FOCUSED)
                        }, E.prototype.onBlur_ = function(e) {
                            this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)
                        }, E.prototype.updateClasses_ = function() {
                            this.checkDisabled(), this.checkValidity(), this.checkDirty()
                        }, E.prototype.checkDisabled = function() {
                            this.input_.disabled ? this.element_.classList.add(this.CssClasses_.IS_DISABLED) : this.element_.classList.remove(this.CssClasses_.IS_DISABLED)
                        }, E.prototype.checkDisabled = E.prototype.checkDisabled, E.prototype.checkValidity = function() {
                            this.input_.validity && (this.input_.validity.valid ? this.element_.classList.remove(this.CssClasses_.IS_INVALID) : this.element_.classList.add(this.CssClasses_.IS_INVALID))
                        }, E.prototype.checkValidity = E.prototype.checkValidity, E.prototype.checkDirty = function() {
                            this.input_.value && this.input_.value.length > 0 ? this.element_.classList.add(this.CssClasses_.IS_DIRTY) : this.element_.classList.remove(this.CssClasses_.IS_DIRTY)
                        }, E.prototype.checkDirty = E.prototype.checkDirty, E.prototype.disable = function() {
                            this.input_.disabled = !0, this.updateClasses_()
                        }, E.prototype.disable = E.prototype.disable, E.prototype.enable = function() {
                            this.input_.disabled = !1, this.updateClasses_()
                        }, E.prototype.enable = E.prototype.enable, E.prototype.change = function(e) {
                            this.input_.value = e || "", this.updateClasses_()
                        }, E.prototype.change = E.prototype.change, E.prototype.init = function() {
                            if (this.element_ && (this.label_ = this.element_.querySelector("." + this.CssClasses_.LABEL), this.input_ = this.element_.querySelector("." + this.CssClasses_.INPUT), this.input_)) {
                                this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE) && (this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10), isNaN(this.maxRows) && (this.maxRows = this.Constant_.NO_MAX_ROWS)), this.boundUpdateClassesHandler = this.updateClasses_.bind(this), this.boundFocusHandler = this.onFocus_.bind(this), this.boundBlurHandler = this.onBlur_.bind(this), this.input_.addEventListener("input", this.boundUpdateClassesHandler), this.input_.addEventListener("focus", this.boundFocusHandler), this.input_.addEventListener("blur", this.boundBlurHandler), this.maxRows !== this.Constant_.NO_MAX_ROWS && (this.boundKeyDownHandler = this.onKeyDown_.bind(this), this.input_.addEventListener("keydown", this.boundKeyDownHandler));
                                var e = this.element_.classList.contains(this.CssClasses_.IS_INVALID);
                                this.updateClasses_(), this.element_.classList.add(this.CssClasses_.IS_UPGRADED), e && this.element_.classList.add(this.CssClasses_.IS_INVALID)
                            }
                        }, E.prototype.mdlDowngrade_ = function() {
                            this.input_.removeEventListener("input", this.boundUpdateClassesHandler), this.input_.removeEventListener("focus", this.boundFocusHandler), this.input_.removeEventListener("blur", this.boundBlurHandler), this.boundKeyDownHandler && this.input_.removeEventListener("keydown", this.boundKeyDownHandler)
                        }, E.prototype.mdlDowngrade = E.prototype.mdlDowngrade_, E.prototype.mdlDowngrade = E.prototype.mdlDowngrade, s.register({
                            constructor: E,
                            classAsString: "MaterialTextfield",
                            cssClass: "mdl-js-textfield",
                            widget: !0
                        });
                        var L = function(e) {
                            this.element_ = e, this.init()
                        };
                        window.MaterialTooltip = L, L.prototype.Constant_ = {}, L.prototype.CssClasses_ = {
                            IS_ACTIVE: "is-active"
                        }, L.prototype.handleMouseEnter_ = function(e) {
                            e.stopPropagation();
                            var t = e.target.getBoundingClientRect(),
                                s = t.left + t.width / 2,
                                i = -1 * (this.element_.offsetWidth / 2);
                            0 > s + i ? (this.element_.style.left = 0, this.element_.style.marginLeft = 0) : (this.element_.style.left = s + "px", this.element_.style.marginLeft = i + "px"), this.element_.style.top = t.top + t.height + 10 + "px", this.element_.classList.add(this.CssClasses_.IS_ACTIVE), window.addEventListener("scroll", this.boundMouseLeaveHandler, !1), window.addEventListener("touchmove", this.boundMouseLeaveHandler, !1)
                        }, L.prototype.handleMouseLeave_ = function(e) {
                            e.stopPropagation(), this.element_.classList.remove(this.CssClasses_.IS_ACTIVE), window.removeEventListener("scroll", this.boundMouseLeaveHandler), window.removeEventListener("touchmove", this.boundMouseLeaveHandler, !1)
                        }, L.prototype.init = function() {
                            if (this.element_) {
                                var e = this.element_.getAttribute("for");
                                e && (this.forElement_ = document.getElementById(e)), this.forElement_ && (this.forElement_.hasAttribute("tabindex") || this.forElement_.setAttribute("tabindex", "0"), this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this), this.boundMouseLeaveHandler = this.handleMouseLeave_.bind(this), this.forElement_.addEventListener("mouseenter", this.boundMouseEnterHandler, !1), this.forElement_.addEventListener("click", this.boundMouseEnterHandler, !1), this.forElement_.addEventListener("blur", this.boundMouseLeaveHandler), this.forElement_.addEventListener("touchstart", this.boundMouseEnterHandler, !1), this.forElement_.addEventListener("mouseleave", this.boundMouseLeaveHandler))
                            }
                        }, L.prototype.mdlDowngrade_ = function() {
                            this.forElement_ && (this.forElement_.removeEventListener("mouseenter", this.boundMouseEnterHandler, !1), this.forElement_.removeEventListener("click", this.boundMouseEnterHandler, !1), this.forElement_.removeEventListener("touchstart", this.boundMouseEnterHandler, !1), this.forElement_.removeEventListener("mouseleave", this.boundMouseLeaveHandler))
                        }, L.prototype.mdlDowngrade = L.prototype.mdlDowngrade_, L.prototype.mdlDowngrade = L.prototype.mdlDowngrade, s.register({
                            constructor: L,
                            classAsString: "MaterialTooltip",
                            cssClass: "mdl-tooltip"
                        });
                        var I = function(e) {
                            this.element_ = e, this.init()
                        };
                        window.MaterialLayout = I, I.prototype.Constant_ = {
                            MAX_WIDTH: "(max-width: 1024px)",
                            TAB_SCROLL_PIXELS: 100,
                            MENU_ICON: "menu",
                            CHEVRON_LEFT: "chevron_left",
                            CHEVRON_RIGHT: "chevron_right"
                        }, I.prototype.Mode_ = {
                            STANDARD: 0,
                            SEAMED: 1,
                            WATERFALL: 2,
                            SCROLL: 3
                        }, I.prototype.CssClasses_ = {
                            CONTAINER: "mdl-layout__container",
                            HEADER: "mdl-layout__header",
                            DRAWER: "mdl-layout__drawer",
                            CONTENT: "mdl-layout__content",
                            DRAWER_BTN: "mdl-layout__drawer-button",
                            ICON: "material-icons",
                            JS_RIPPLE_EFFECT: "mdl-js-ripple-effect",
                            RIPPLE_CONTAINER: "mdl-layout__tab-ripple-container",
                            RIPPLE: "mdl-ripple",
                            RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events",
                            HEADER_SEAMED: "mdl-layout__header--seamed",
                            HEADER_WATERFALL: "mdl-layout__header--waterfall",
                            HEADER_SCROLL: "mdl-layout__header--scroll",
                            FIXED_HEADER: "mdl-layout--fixed-header",
                            OBFUSCATOR: "mdl-layout__obfuscator",
                            TAB_BAR: "mdl-layout__tab-bar",
                            TAB_CONTAINER: "mdl-layout__tab-bar-container",
                            TAB: "mdl-layout__tab",
                            TAB_BAR_BUTTON: "mdl-layout__tab-bar-button",
                            TAB_BAR_LEFT_BUTTON: "mdl-layout__tab-bar-left-button",
                            TAB_BAR_RIGHT_BUTTON: "mdl-layout__tab-bar-right-button",
                            PANEL: "mdl-layout__tab-panel",
                            HAS_DRAWER: "has-drawer",
                            HAS_TABS: "has-tabs",
                            HAS_SCROLLING_HEADER: "has-scrolling-header",
                            CASTING_SHADOW: "is-casting-shadow",
                            IS_COMPACT: "is-compact",
                            IS_SMALL_SCREEN: "is-small-screen",
                            IS_DRAWER_OPEN: "is-visible",
                            IS_ACTIVE: "is-active",
                            IS_UPGRADED: "is-upgraded",
                            IS_ANIMATING: "is-animating",
                            ON_LARGE_SCREEN: "mdl-layout--large-screen-only",
                            ON_SMALL_SCREEN: "mdl-layout--small-screen-only"
                        }, I.prototype.contentScrollHandler_ = function() {
                            this.header_.classList.contains(this.CssClasses_.IS_ANIMATING) || (this.content_.scrollTop > 0 && !this.header_.classList.contains(this.CssClasses_.IS_COMPACT) ? (this.header_.classList.add(this.CssClasses_.CASTING_SHADOW), this.header_.classList.add(this.CssClasses_.IS_COMPACT), this.header_.classList.add(this.CssClasses_.IS_ANIMATING)) : this.content_.scrollTop <= 0 && this.header_.classList.contains(this.CssClasses_.IS_COMPACT) && (this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW), this.header_.classList.remove(this.CssClasses_.IS_COMPACT), this.header_.classList.add(this.CssClasses_.IS_ANIMATING)))
                        }, I.prototype.screenSizeHandler_ = function() {
                            this.screenSizeMediaQuery_.matches ? this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN) : (this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN), this.drawer_ && (this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN), this.obfuscator_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN)))
                        }, I.prototype.drawerToggleHandler_ = function() {
                            this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN), this.obfuscator_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN)
                        }, I.prototype.headerTransitionEndHandler_ = function() {
                            this.header_.classList.remove(this.CssClasses_.IS_ANIMATING)
                        }, I.prototype.headerClickHandler_ = function() {
                            this.header_.classList.contains(this.CssClasses_.IS_COMPACT) && (this.header_.classList.remove(this.CssClasses_.IS_COMPACT), this.header_.classList.add(this.CssClasses_.IS_ANIMATING))
                        }, I.prototype.resetTabState_ = function(e) {
                            for (var t = 0; tn; n++) {
                                var a = s[n];
                                a.classList && a.classList.contains(this.CssClasses_.HEADER) && (this.header_ = a), a.classList && a.classList.contains(this.CssClasses_.DRAWER) && (this.drawer_ = a), a.classList && a.classList.contains(this.CssClasses_.CONTENT) && (this.content_ = a)
                            }
                            this.header_ && (this.tabBar_ = this.header_.querySelector("." + this.CssClasses_.TAB_BAR));
                            var l = this.Mode_.STANDARD;
                            if (this.header_ && (this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED) ? l = this.Mode_.SEAMED : this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL) ? (l = this.Mode_.WATERFALL, this.header_.addEventListener("transitionend", this.headerTransitionEndHandler_.bind(this)), this.header_.addEventListener("click", this.headerClickHandler_.bind(this))) : this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL) && (l = this.Mode_.SCROLL, e.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER)), l === this.Mode_.STANDARD ? (this.header_.classList.add(this.CssClasses_.CASTING_SHADOW), this.tabBar_ && this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW)) : l === this.Mode_.SEAMED || l === this.Mode_.SCROLL ? (this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW), this.tabBar_ && this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW)) : l === this.Mode_.WATERFALL && (this.content_.addEventListener("scroll", this.contentScrollHandler_.bind(this)), this.contentScrollHandler_())), this.drawer_) {
                                var o = this.element_.querySelector("." + this.CssClasses_.DRAWER_BTN);
                                if (!o) {
                                    o = document.createElement("div"), o.classList.add(this.CssClasses_.DRAWER_BTN);
                                    var r = document.createElement("i");
                                    r.classList.add(this.CssClasses_.ICON), r.textContent = this.Constant_.MENU_ICON, o.appendChild(r)
                                }
                                this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN) ? o.classList.add(this.CssClasses_.ON_LARGE_SCREEN) : this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN) && o.classList.add(this.CssClasses_.ON_SMALL_SCREEN), o.addEventListener("click", this.drawerToggleHandler_.bind(this)), this.element_.classList.add(this.CssClasses_.HAS_DRAWER), this.element_.classList.contains(this.CssClasses_.FIXED_HEADER) ? this.header_.insertBefore(o, this.header_.firstChild) : this.element_.insertBefore(o, this.content_);
                                var d = document.createElement("div");
                                d.classList.add(this.CssClasses_.OBFUSCATOR), this.element_.appendChild(d), d.addEventListener("click", this.drawerToggleHandler_.bind(this)), this.obfuscator_ = d
                            }
                            if (this.screenSizeMediaQuery_ = window.matchMedia(this.Constant_.MAX_WIDTH), this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this)), this.screenSizeHandler_(), this.header_ && this.tabBar_) {
                                this.element_.classList.add(this.CssClasses_.HAS_TABS);
                                var _ = document.createElement("div");
                                _.classList.add(this.CssClasses_.TAB_CONTAINER), this.header_.insertBefore(_, this.tabBar_), this.header_.removeChild(this.tabBar_);
                                var h = document.createElement("div");
                                h.classList.add(this.CssClasses_.TAB_BAR_BUTTON), h.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);
                                var p = document.createElement("i");
                                p.classList.add(this.CssClasses_.ICON), p.textContent = this.Constant_.CHEVRON_LEFT, h.appendChild(p), h.addEventListener("click", function() {
                                    this.tabBar_.scrollLeft -= this.Constant_.TAB_SCROLL_PIXELS
                                }.bind(this));
                                var c = document.createElement("div");
                                c.classList.add(this.CssClasses_.TAB_BAR_BUTTON), c.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);
                                var u = document.createElement("i");
                                u.classList.add(this.CssClasses_.ICON), u.textContent = this.Constant_.CHEVRON_RIGHT, c.appendChild(u), c.addEventListener("click", function() {
                                    this.tabBar_.scrollLeft += this.Constant_.TAB_SCROLL_PIXELS
                                }.bind(this)), _.appendChild(h), _.appendChild(this.tabBar_), _.appendChild(c);
                                var C = function() {
                                    this.tabBar_.scrollLeft > 0 ? h.classList.add(this.CssClasses_.IS_ACTIVE) : h.classList.remove(this.CssClasses_.IS_ACTIVE), this.tabBar_.scrollLeft0) return;
                                this.setFrameCount(1);
                                var i, n, a = e.currentTarget.getBoundingClientRect();
                                if (0 === e.clientX && 0 === e.clientY) i = Math.round(a.width / 2), n = Math.round(a.height / 2);
                                else {
                                    var l = e.clientX ? e.clientX : e.touches[0].clientX,
                                        o = e.clientY ? e.clientY : e.touches[0].clientY;
                                    i = Math.round(l - a.left), n = Math.round(o - a.top)
                                }
                                this.setRippleXY(i, n), this.setRippleStyles(!0), window.requestAnimationFrame(this.animFrameHandler.bind(this))
                            }
                        }, b.prototype.upHandler_ = function(e) {
                            e && 2 !== e.detail && this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE), window.setTimeout(function() {
                                this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE)
                            }.bind(this), 0)
                        }, b.prototype.init = function() {
                            if (this.element_) {
                                var e = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);
                                this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS) || (this.rippleElement_ = this.element_.querySelector("." + this.CssClasses_.RIPPLE), this.frameCount_ = 0, this.rippleSize_ = 0, this.x_ = 0, this.y_ = 0, this.ignoringMouseDown_ = !1, this.boundDownHandler = this.downHandler_.bind(this), this.element_.addEventListener("mousedown", this.boundDownHandler), this.element_.addEventListener("touchstart", this.boundDownHandler), this.boundUpHandler = this.upHandler_.bind(this), this.element_.addEventListener("mouseup", this.boundUpHandler), this.element_.addEventListener("mouseleave", this.boundUpHandler), this.element_.addEventListener("touchend", this.boundUpHandler), this.element_.addEventListener("blur", this.boundUpHandler), this.getFrameCount = function() {
                                    return this.frameCount_
                                }, this.setFrameCount = function(e) {
                                    this.frameCount_ = e
                                }, this.getRippleElement = function() {
                                    return this.rippleElement_
                                }, this.setRippleXY = function(e, t) {
                                    this.x_ = e, this.y_ = t
                                }, this.setRippleStyles = function(t) {
                                    if (null !== this.rippleElement_) {
                                        var s, i, n, a = "translate(" + this.x_ + "px, " + this.y_ + "px)";
                                        t ? (i = this.Constant_.INITIAL_SCALE, n = this.Constant_.INITIAL_SIZE) : (i = this.Constant_.FINAL_SCALE, n = this.rippleSize_ + "px", e && (a = "translate(" + this.boundWidth / 2 + "px, " + this.boundHeight / 2 + "px)")), s = "translate(-50%, -50%) " + a + i, this.rippleElement_.style.webkitTransform = s, this.rippleElement_.style.msTransform = s, this.rippleElement_.style.transform = s, t ? this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING) : this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING)
                                    }
                                }, this.animFrameHandler = function() {
                                    this.frameCount_-- > 0 ? window.requestAnimationFrame(this.animFrameHandler.bind(this)) : this.setRippleStyles(!1)
                                })
                            }
                        }, b.prototype.mdlDowngrade_ = function() {
                            this.element_.removeEventListener("mousedown", this.boundDownHandler), this.element_.removeEventListener("touchstart", this.boundDownHandler), this.element_.removeEventListener("mouseup", this.boundUpHandler), this.element_.removeEventListener("mouseleave", this.boundUpHandler), this.element_.removeEventListener("touchend", this.boundUpHandler), this.element_.removeEventListener("blur", this.boundUpHandler)
                        }, b.prototype.mdlDowngrade = b.prototype.mdlDowngrade_, b.prototype.mdlDowngrade = b.prototype.mdlDowngrade, s.register({
                            constructor: b,
                            classAsString: "MaterialRipple",
                            cssClass: "mdl-js-ripple-effect",
                            widget: !1
                        })
                    }(); //# sourceMappingURL=material.min.js.map